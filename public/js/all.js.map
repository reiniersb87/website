{"version":3,"sources":["bootstrap_select.js","i18n/defaults-es_CL.js"],"names":[],"mappingsvsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["/*!\n * Bootstrap-select v1.6.3 (http://silviomoreto.github.io/bootstrap-select/)\n *\n * Copyright 2013-2014 bootstrap-select\n * Licensed under MIT (https://github.com/silviomoreto/bootstrap-select/blob/master/LICENSE)\n */\n(function ($) {\n  'use strict';\n\n  // Case insensitive search\n  $.expr[':'].icontains = function (obj, index, meta) {\n    return icontains($(obj).text(), meta[3]);\n  };\n\n  // Case and accent insensitive search\n  $.expr[':'].aicontains = function (obj, index, meta) {\n    return icontains($(obj).data('normalizedText') || $(obj).text(), meta[3]);\n  };\n\n  /**\n   * Actual implementation of the case insensitive search.\n   * @access private\n   * @param {String} haystack\n   * @param {String} needle\n   * @returns {boolean}\n   */\n  function icontains(haystack, needle) {\n    return haystack.toUpperCase().indexOf(needle.toUpperCase()) > -1;\n  }\n\n  /**\n   * Remove all diatrics from the given text.\n   * @access private\n   * @param {String} text\n   * @returns {String}\n   */\n  function normalizeToBase(text) {\n    var rExps = [\n      {re: /[\\xC0-\\xC6]/g, ch: \"A\"},\n      {re: /[\\xE0-\\xE6]/g, ch: \"a\"},\n      {re: /[\\xC8-\\xCB]/g, ch: \"E\"},\n      {re: /[\\xE8-\\xEB]/g, ch: \"e\"},\n      {re: /[\\xCC-\\xCF]/g, ch: \"I\"},\n      {re: /[\\xEC-\\xEF]/g, ch: \"i\"},\n      {re: /[\\xD2-\\xD6]/g, ch: \"O\"},\n      {re: /[\\xF2-\\xF6]/g, ch: \"o\"},\n      {re: /[\\xD9-\\xDC]/g, ch: \"U\"},\n      {re: /[\\xF9-\\xFC]/g, ch: \"u\"},\n      {re: /[\\xC7-\\xE7]/g, ch: \"c\"},\n      {re: /[\\xD1]/g, ch: \"N\"},\n      {re: /[\\xF1]/g, ch: \"n\"}\n    ];\n    $.each(rExps, function () {\n      text = text.replace(this.re, this.ch);\n    });\n    return text;\n  }\n\n\n  function htmlEscape(html) {\n    var escapeMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;',\n      '`': '&#x60;'\n    };\n    var source = '(?:' + Object.keys(escapeMap).join('|') + ')',\n        testRegexp = new RegExp(source),\n        replaceRegexp = new RegExp(source, 'g'),\n        string = html == null ? '' : '' + html;\n    return testRegexp.test(string) ? string.replace(replaceRegexp, function (match) {\n      return escapeMap[match];\n    }) : string;\n  }\n\n  var Selectpicker = function (element, options, e) {\n    if (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    this.$element = $(element);\n    this.$newElement = null;\n    this.$button = null;\n    this.$menu = null;\n    this.$lis = null;\n    this.options = options;\n\n    // If we have no title yet, try to pull it from the html title attribute (jQuery doesnt' pick it up as it's not a\n    // data-attribute)\n    if (this.options.title === null) {\n      this.options.title = this.$element.attr('title');\n    }\n\n    //Expose public methods\n    this.val = Selectpicker.prototype.val;\n    this.render = Selectpicker.prototype.render;\n    this.refresh = Selectpicker.prototype.refresh;\n    this.setStyle = Selectpicker.prototype.setStyle;\n    this.selectAll = Selectpicker.prototype.selectAll;\n    this.deselectAll = Selectpicker.prototype.deselectAll;\n    this.destroy = Selectpicker.prototype.remove;\n    this.remove = Selectpicker.prototype.remove;\n    this.show = Selectpicker.prototype.show;\n    this.hide = Selectpicker.prototype.hide;\n\n    this.init();\n  };\n\n  Selectpicker.VERSION = '1.6.3';\n\n  // part of this is duplicated in i18n/defaults-en_US.js. Make sure to update both.\n  Selectpicker.DEFAULTS = {\n    noneSelectedText: 'Nothing selected',\n    noneResultsText: 'No results match',\n    countSelectedText: function (numSelected, numTotal) {\n      return (numSelected == 1) ? \"{0} item selected\" : \"{0} items selected\";\n    },\n    maxOptionsText: function (numAll, numGroup) {\n      var arr = [];\n\n      arr[0] = (numAll == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)';\n      arr[1] = (numGroup == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)';\n\n      return arr;\n    },\n    selectAllText: 'Select All',\n    deselectAllText: 'Deselect All',\n    multipleSeparator: ', ',\n    style: 'btn-default',\n    size: 'auto',\n    title: null,\n    selectedTextFormat: 'values',\n    width: false,\n    container: false,\n    hideDisabled: false,\n    showSubtext: false,\n    showIcon: true,\n    showContent: true,\n    dropupAuto: true,\n    header: false,\n    liveSearch: false,\n    actionsBox: false,\n    iconBase: 'glyphicon',\n    tickIcon: 'glyphicon-ok',\n    maxOptions: false,\n    mobile: false,\n    selectOnTab: false,\n    dropdownAlignRight: false,\n    searchAccentInsensitive: false\n  };\n\n  Selectpicker.prototype = {\n\n    constructor: Selectpicker,\n\n    init: function () {\n      var that = this,\n          id = this.$element.attr('id');\n\n      this.$element.hide();\n      this.multiple = this.$element.prop('multiple');\n      this.autofocus = this.$element.prop('autofocus');\n      this.$newElement = this.createView();\n      this.$element.after(this.$newElement);\n      this.$menu = this.$newElement.find('> .dropdown-menu');\n      this.$button = this.$newElement.find('> button');\n      this.$searchbox = this.$newElement.find('input');\n\n      if (this.options.dropdownAlignRight)\n        this.$menu.addClass('dropdown-menu-right');\n\n      if (typeof id !== 'undefined') {\n        this.$button.attr('data-id', id);\n        $('label[for=\"' + id + '\"]').click(function (e) {\n          e.preventDefault();\n          that.$button.focus();\n        });\n      }\n\n      this.checkDisabled();\n      this.clickListener();\n      if (this.options.liveSearch) this.liveSearchListener();\n      this.render();\n      this.liHeight();\n      this.setStyle();\n      this.setWidth();\n      if (this.options.container) this.selectPosition();\n      this.$menu.data('this', this);\n      this.$newElement.data('this', this);\n      if (this.options.mobile) this.mobile();\n    },\n\n    createDropdown: function () {\n      // Options\n      // If we are multiple, then add the show-tick class by default\n      var multiple = this.multiple ? ' show-tick' : '',\n          inputGroup = this.$element.parent().hasClass('input-group') ? ' input-group-btn' : '',\n          autofocus = this.autofocus ? ' autofocus' : '',\n          btnSize = this.$element.parents().hasClass('form-group-lg') ? ' btn-lg' : (this.$element.parents().hasClass('form-group-sm') ? ' btn-sm' : '');\n      // Elements\n      var header = this.options.header ? '<div class=\"popover-title\"><button type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button>' + this.options.header + '</div>' : '';\n      var searchbox = this.options.liveSearch ? '<div class=\"bs-searchbox\"><input type=\"text\" class=\"input-block-level form-control\" autocomplete=\"off\" /></div>' : '';\n      var actionsbox = this.options.actionsBox ? '<div class=\"bs-actionsbox\">' +\n      '<div class=\"btn-group btn-block\">' +\n      '<button class=\"actions-btn bs-select-all btn btn-sm btn-default\">' +\n      this.options.selectAllText +\n      '</button>' +\n      '<button class=\"actions-btn bs-deselect-all btn btn-sm btn-default\">' +\n      this.options.deselectAllText +\n      '</button>' +\n      '</div>' +\n      '</div>' : '';\n      var drop =\n          '<div class=\"btn-group bootstrap-select' + multiple + inputGroup + '\">' +\n          '<button type=\"button\" class=\"btn dropdown-toggle selectpicker' + btnSize + '\" data-toggle=\"dropdown\"' + autofocus + '>' +\n          '<span class=\"filter-option pull-left\"></span>&nbsp;' +\n          '<span class=\"caret\"></span>' +\n          '</button>' +\n          '<div class=\"dropdown-menu open\">' +\n          header +\n          searchbox +\n          actionsbox +\n          '<ul class=\"dropdown-menu inner selectpicker\" role=\"menu\">' +\n          '</ul>' +\n          '</div>' +\n          '</div>';\n\n      return $(drop);\n    },\n\n    createView: function () {\n      var $drop = this.createDropdown();\n      var $li = this.createLi();\n      $drop.find('ul').append($li);\n      return $drop;\n    },\n\n    reloadLi: function () {\n      //Remove all children.\n      this.destroyLi();\n      //Re build\n      var $li = this.createLi();\n      this.$menu.find('ul').append($li);\n    },\n\n    destroyLi: function () {\n      this.$menu.find('li').remove();\n    },\n\n    createLi: function () {\n      var that = this,\n          _li = [],\n          optID = 0;\n\n      // Helper functions\n      /**\n       * @param content\n       * @param [index]\n       * @param [classes]\n       * @returns {string}\n       */\n      var generateLI = function (content, index, classes) {\n        return '<li' +\n        (typeof classes !== 'undefined' ? ' class=\"' + classes + '\"' : '') +\n        (typeof index !== 'undefined' | null === index ? ' data-original-index=\"' + index + '\"' : '') +\n        '>' + content + '</li>';\n      };\n\n      /**\n       * @param text\n       * @param [classes]\n       * @param [inline]\n       * @param [optgroup]\n       * @returns {string}\n       */\n      var generateA = function (text, classes, inline, optgroup) {\n        var normText = normalizeToBase(htmlEscape(text));\n        return '<a tabindex=\"0\"' +\n        (typeof classes !== 'undefined' ? ' class=\"' + classes + '\"' : '') +\n        (typeof inline !== 'undefined' ? ' style=\"' + inline + '\"' : '') +\n        (typeof optgroup !== 'undefined' ? 'data-optgroup=\"' + optgroup + '\"' : '') +\n        ' data-normalized-text=\"' + normText + '\"' +\n        '>' + text +\n        '<span class=\"' + that.options.iconBase + ' ' + that.options.tickIcon + ' check-mark\"></span>' +\n        '</a>';\n      };\n\n      this.$element.find('option').each(function () {\n        var $this = $(this);\n\n        // Get the class and text for the option\n        var optionClass = $this.attr('class') || '',\n            inline = $this.attr('style'),\n            text = $this.data('content') ? $this.data('content') : $this.html(),\n            subtext = typeof $this.data('subtext') !== 'undefined' ? '<small class=\"muted text-muted\">' + $this.data('subtext') + '</small>' : '',\n            icon = typeof $this.data('icon') !== 'undefined' ? '<span class=\"' + that.options.iconBase + ' ' + $this.data('icon') + '\"></span> ' : '',\n            isDisabled = $this.is(':disabled') || $this.parent().is(':disabled'),\n            index = $this[0].index;\n        if (icon !== '' && isDisabled) {\n          icon = '<span>' + icon + '</span>';\n        }\n\n        if (!$this.data('content')) {\n          // Prepend any icon and append any subtext to the main text.\n          text = icon + '<span class=\"text\">' + text + subtext + '</span>';\n        }\n\n        if (that.options.hideDisabled && isDisabled) {\n          return;\n        }\n\n        if ($this.parent().is('optgroup') && $this.data('divider') !== true) {\n          if ($this.index() === 0) { // Is it the first option of the optgroup?\n            optID += 1;\n\n            // Get the opt group label\n            var label = $this.parent().attr('label');\n            var labelSubtext = typeof $this.parent().data('subtext') !== 'undefined' ? '<small class=\"muted text-muted\">' + $this.parent().data('subtext') + '</small>' : '';\n            var labelIcon = $this.parent().data('icon') ? '<span class=\"' + that.options.iconBase + ' ' + $this.parent().data('icon') + '\"></span> ' : '';\n            label = labelIcon + '<span class=\"text\">' + label + labelSubtext + '</span>';\n\n            if (index !== 0 && _li.length > 0) { // Is it NOT the first option of the select && are there elements in the dropdown?\n              _li.push(generateLI('', null, 'divider'));\n            }\n\n            _li.push(generateLI(label, null, 'dropdown-header'));\n          }\n\n          _li.push(generateLI(generateA(text, 'opt ' + optionClass, inline, optID), index));\n        } else if ($this.data('divider') === true) {\n          _li.push(generateLI('', index, 'divider'));\n        } else if ($this.data('hidden') === true) {\n          _li.push(generateLI(generateA(text, optionClass, inline), index, 'hide is-hidden'));\n        } else {\n          _li.push(generateLI(generateA(text, optionClass, inline), index));\n        }\n      });\n\n      //If we are not multiple, we don't have a selected item, and we don't have a title, select the first element so something is set in the button\n      if (!this.multiple && this.$element.find('option:selected').length === 0 && !this.options.title) {\n        this.$element.find('option').eq(0).prop('selected', true).attr('selected', 'selected');\n      }\n\n      return $(_li.join(''));\n    },\n\n    findLis: function () {\n      if (this.$lis == null) this.$lis = this.$menu.find('li');\n      return this.$lis;\n    },\n\n    /**\n     * @param [updateLi] defaults to true\n     */\n    render: function (updateLi) {\n      var that = this;\n\n      //Update the LI to match the SELECT\n      if (updateLi !== false) {\n        this.$element.find('option').each(function (index) {\n          that.setDisabled(index, $(this).is(':disabled') || $(this).parent().is(':disabled'));\n          that.setSelected(index, $(this).is(':selected'));\n        });\n      }\n\n      this.tabIndex();\n      var notDisabled = this.options.hideDisabled ? ':not([disabled])' : '';\n      var selectedItems = this.$element.find('option:selected' + notDisabled).map(function () {\n        var $this = $(this);\n        var icon = $this.data('icon') && that.options.showIcon ? '<i class=\"' + that.options.iconBase + ' ' + $this.data('icon') + '\"></i> ' : '';\n        var subtext;\n        if (that.options.showSubtext && $this.attr('data-subtext') && !that.multiple) {\n          subtext = ' <small class=\"muted text-muted\">' + $this.data('subtext') + '</small>';\n        } else {\n          subtext = '';\n        }\n        if ($this.data('content') && that.options.showContent) {\n          return $this.data('content');\n        } else if (typeof $this.attr('title') !== 'undefined') {\n          return $this.attr('title');\n        } else {\n          return icon + $this.html() + subtext;\n        }\n      }).toArray();\n\n      //Fixes issue in IE10 occurring when no default option is selected and at least one option is disabled\n      //Convert all the values into a comma delimited string\n      var title = !this.multiple ? selectedItems[0] : selectedItems.join(this.options.multipleSeparator);\n\n      //If this is multi select, and the selectText type is count, the show 1 of 2 selected etc..\n      if (this.multiple && this.options.selectedTextFormat.indexOf('count') > -1) {\n        var max = this.options.selectedTextFormat.split('>');\n        if ((max.length > 1 && selectedItems.length > max[1]) || (max.length == 1 && selectedItems.length >= 2)) {\n          notDisabled = this.options.hideDisabled ? ', [disabled]' : '';\n          var totalCount = this.$element.find('option').not('[data-divider=\"true\"], [data-hidden=\"true\"]' + notDisabled).length,\n              tr8nText = (typeof this.options.countSelectedText === 'function') ? this.options.countSelectedText(selectedItems.length, totalCount) : this.options.countSelectedText;\n          title = tr8nText.replace('{0}', selectedItems.length.toString()).replace('{1}', totalCount.toString());\n        }\n      }\n\n      this.options.title = this.$element.attr('title');\n\n      if (this.options.selectedTextFormat == 'static') {\n        title = this.options.title;\n      }\n\n      //If we dont have a title, then use the default, or if nothing is set at all, use the not selected text\n      if (!title) {\n        title = typeof this.options.title !== 'undefined' ? this.options.title : this.options.noneSelectedText;\n      }\n\n      this.$button.attr('title', htmlEscape(title));\n      this.$newElement.find('.filter-option').html(title);\n    },\n\n    /**\n     * @param [style]\n     * @param [status]\n     */\n    setStyle: function (style, status) {\n      if (this.$element.attr('class')) {\n        this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|validate\\[.*\\]/gi, ''));\n      }\n\n      var buttonClass = style ? style : this.options.style;\n\n      if (status == 'add') {\n        this.$button.addClass(buttonClass);\n      } else if (status == 'remove') {\n        this.$button.removeClass(buttonClass);\n      } else {\n        this.$button.removeClass(this.options.style);\n        this.$button.addClass(buttonClass);\n      }\n    },\n\n    liHeight: function () {\n      if (this.options.size === false) return;\n\n      var $selectClone = this.$menu.parent().clone().find('> .dropdown-toggle').prop('autofocus', false).end().appendTo('body'),\n          $menuClone = $selectClone.addClass('open').find('> .dropdown-menu'),\n          liHeight = $menuClone.find('li').not('.divider').not('.dropdown-header').filter(':visible').children('a').outerHeight(),\n          headerHeight = this.options.header ? $menuClone.find('.popover-title').outerHeight() : 0,\n          searchHeight = this.options.liveSearch ? $menuClone.find('.bs-searchbox').outerHeight() : 0,\n          actionsHeight = this.options.actionsBox ? $menuClone.find('.bs-actionsbox').outerHeight() : 0;\n\n      $selectClone.remove();\n\n      this.$newElement\n          .data('liHeight', liHeight)\n          .data('headerHeight', headerHeight)\n          .data('searchHeight', searchHeight)\n          .data('actionsHeight', actionsHeight);\n    },\n\n    setSize: function () {\n      this.findLis();\n      var that = this,\n          menu = this.$menu,\n          menuInner = menu.find('.inner'),\n          selectHeight = this.$newElement.outerHeight(),\n          liHeight = this.$newElement.data('liHeight'),\n          headerHeight = this.$newElement.data('headerHeight'),\n          searchHeight = this.$newElement.data('searchHeight'),\n          actionsHeight = this.$newElement.data('actionsHeight'),\n          divHeight = this.$lis.filter('.divider').outerHeight(true),\n          menuPadding = parseInt(menu.css('padding-top')) +\n              parseInt(menu.css('padding-bottom')) +\n              parseInt(menu.css('border-top-width')) +\n              parseInt(menu.css('border-bottom-width')),\n          notDisabled = this.options.hideDisabled ? ', .disabled' : '',\n          $window = $(window),\n          menuExtras = menuPadding + parseInt(menu.css('margin-top')) + parseInt(menu.css('margin-bottom')) + 2,\n          menuHeight,\n          selectOffsetTop,\n          selectOffsetBot,\n          posVert = function () {\n            // JQuery defines a scrollTop function, but in pure JS it's a property\n            //noinspection JSValidateTypes\n            selectOffsetTop = that.$newElement.offset().top - $window.scrollTop();\n            selectOffsetBot = $window.height() - selectOffsetTop - selectHeight;\n          };\n      posVert();\n      if (this.options.header) menu.css('padding-top', 0);\n\n      if (this.options.size == 'auto') {\n        var getSize = function () {\n          var minHeight,\n              lisVis = that.$lis.not('.hide');\n\n          posVert();\n          menuHeight = selectOffsetBot - menuExtras;\n\n          if (that.options.dropupAuto) {\n            that.$newElement.toggleClass('dropup', (selectOffsetTop > selectOffsetBot) && ((menuHeight - menuExtras) < menu.height()));\n          }\n          if (that.$newElement.hasClass('dropup')) {\n            menuHeight = selectOffsetTop - menuExtras;\n          }\n\n          if ((lisVis.length + lisVis.filter('.dropdown-header').length) > 3) {\n            minHeight = liHeight * 3 + menuExtras - 2;\n          } else {\n            minHeight = 0;\n          }\n\n          menu.css({\n            'max-height': menuHeight + 'px',\n            'overflow': 'hidden',\n            'min-height': minHeight + headerHeight + searchHeight + actionsHeight + 'px'\n          });\n          menuInner.css({\n            'max-height': menuHeight - headerHeight - searchHeight - actionsHeight - menuPadding + 'px',\n            'overflow-y': 'auto',\n            'min-height': Math.max(minHeight - menuPadding, 0) + 'px'\n          });\n        };\n        getSize();\n        this.$searchbox.off('input.getSize propertychange.getSize').on('input.getSize propertychange.getSize', getSize);\n        $(window).off('resize.getSize').on('resize.getSize', getSize);\n        $(window).off('scroll.getSize').on('scroll.getSize', getSize);\n      } else if (this.options.size && this.options.size != 'auto' && menu.find('li' + notDisabled).length > this.options.size) {\n        var optIndex = this.$lis.not('.divider' + notDisabled).find(' > *').slice(0, this.options.size).last().parent().index();\n        var divLength = this.$lis.slice(0, optIndex + 1).filter('.divider').length;\n        menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding;\n        if (that.options.dropupAuto) {\n          //noinspection JSUnusedAssignment\n          this.$newElement.toggleClass('dropup', (selectOffsetTop > selectOffsetBot) && (menuHeight < menu.height()));\n        }\n        menu.css({'max-height': menuHeight + headerHeight + searchHeight + actionsHeight + 'px', 'overflow': 'hidden'});\n        menuInner.css({'max-height': menuHeight - menuPadding + 'px', 'overflow-y': 'auto'});\n      }\n    },\n\n    setWidth: function () {\n      if (this.options.width == 'auto') {\n        this.$menu.css('min-width', '0');\n\n        // Get correct width if element hidden\n        var selectClone = this.$newElement.clone().appendTo('body');\n        var ulWidth = selectClone.find('> .dropdown-menu').css('width');\n        var btnWidth = selectClone.css('width', 'auto').find('> button').css('width');\n        selectClone.remove();\n\n        // Set width to whatever's larger, button title or longest option\n        this.$newElement.css('width', Math.max(parseInt(ulWidth), parseInt(btnWidth)) + 'px');\n      } else if (this.options.width == 'fit') {\n        // Remove inline min-width so width can be changed from 'auto'\n        this.$menu.css('min-width', '');\n        this.$newElement.css('width', '').addClass('fit-width');\n      } else if (this.options.width) {\n        // Remove inline min-width so width can be changed from 'auto'\n        this.$menu.css('min-width', '');\n        this.$newElement.css('width', this.options.width);\n      } else {\n        // Remove inline min-width/width so width can be changed\n        this.$menu.css('min-width', '');\n        this.$newElement.css('width', '');\n      }\n      // Remove fit-width class if width is changed programmatically\n      if (this.$newElement.hasClass('fit-width') && this.options.width !== 'fit') {\n        this.$newElement.removeClass('fit-width');\n      }\n    },\n\n    selectPosition: function () {\n      var that = this,\n          drop = '<div />',\n          $drop = $(drop),\n          pos,\n          actualHeight,\n          getPlacement = function ($element) {\n            $drop.addClass($element.attr('class').replace(/form-control/gi, '')).toggleClass('dropup', $element.hasClass('dropup'));\n            pos = $element.offset();\n            actualHeight = $element.hasClass('dropup') ? 0 : $element[0].offsetHeight;\n            $drop.css({\n              'top': pos.top + actualHeight,\n              'left': pos.left,\n              'width': $element[0].offsetWidth,\n              'position': 'absolute'\n            });\n          };\n      this.$newElement.on('click', function () {\n        if (that.isDisabled()) {\n          return;\n        }\n        getPlacement($(this));\n        $drop.appendTo(that.options.container);\n        $drop.toggleClass('open', !$(this).hasClass('open'));\n        $drop.append(that.$menu);\n      });\n      $(window).resize(function () {\n        getPlacement(that.$newElement);\n      });\n      $(window).on('scroll', function () {\n        getPlacement(that.$newElement);\n      });\n      $('html').on('click', function (e) {\n        if ($(e.target).closest(that.$newElement).length < 1) {\n          $drop.removeClass('open');\n        }\n      });\n    },\n\n    setSelected: function (index, selected) {\n      this.findLis();\n      this.$lis.filter('[data-original-index=\"' + index + '\"]').toggleClass('selected', selected);\n    },\n\n    setDisabled: function (index, disabled) {\n      this.findLis();\n      if (disabled) {\n        this.$lis.filter('[data-original-index=\"' + index + '\"]').addClass('disabled').find('a').attr('href', '#').attr('tabindex', -1);\n      } else {\n        this.$lis.filter('[data-original-index=\"' + index + '\"]').removeClass('disabled').find('a').removeAttr('href').attr('tabindex', 0);\n      }\n    },\n\n    isDisabled: function () {\n      return this.$element.is(':disabled');\n    },\n\n    checkDisabled: function () {\n      var that = this;\n\n      if (this.isDisabled()) {\n        this.$button.addClass('disabled').attr('tabindex', -1);\n      } else {\n        if (this.$button.hasClass('disabled')) {\n          this.$button.removeClass('disabled');\n        }\n\n        if (this.$button.attr('tabindex') == -1) {\n          if (!this.$element.data('tabindex')) this.$button.removeAttr('tabindex');\n        }\n      }\n\n      this.$button.click(function () {\n        return !that.isDisabled();\n      });\n    },\n\n    tabIndex: function () {\n      if (this.$element.is('[tabindex]')) {\n        this.$element.data('tabindex', this.$element.attr('tabindex'));\n        this.$button.attr('tabindex', this.$element.data('tabindex'));\n      }\n    },\n\n    clickListener: function () {\n      var that = this;\n\n      this.$newElement.on('touchstart.dropdown', '.dropdown-menu', function (e) {\n        e.stopPropagation();\n      });\n\n      this.$newElement.on('click', function () {\n        that.setSize();\n        if (!that.options.liveSearch && !that.multiple) {\n          setTimeout(function () {\n            that.$menu.find('.selected a').focus();\n          }, 10);\n        }\n      });\n\n      this.$menu.on('click', 'li a', function (e) {\n        var $this = $(this),\n            clickedIndex = $this.parent().data('originalIndex'),\n            prevValue = that.$element.val(),\n            prevIndex = that.$element.prop('selectedIndex');\n\n        // Don't close on multi choice menu\n        if (that.multiple) {\n          e.stopPropagation();\n        }\n\n        e.preventDefault();\n\n        //Don't run if we have been disabled\n        if (!that.isDisabled() && !$this.parent().hasClass('disabled')) {\n          var $options = that.$element.find('option'),\n              $option = $options.eq(clickedIndex),\n              state = $option.prop('selected'),\n              $optgroup = $option.parent('optgroup'),\n              maxOptions = that.options.maxOptions,\n              maxOptionsGrp = $optgroup.data('maxOptions') || false;\n\n          if (!that.multiple) { // Deselect all others if not multi select box\n            $options.prop('selected', false);\n            $option.prop('selected', true);\n            that.$menu.find('.selected').removeClass('selected');\n            that.setSelected(clickedIndex, true);\n          } else { // Toggle the one we have chosen if we are multi select.\n            $option.prop('selected', !state);\n            that.setSelected(clickedIndex, !state);\n            $this.blur();\n\n            if ((maxOptions !== false) || (maxOptionsGrp !== false)) {\n              var maxReached = maxOptions < $options.filter(':selected').length,\n                  maxReachedGrp = maxOptionsGrp < $optgroup.find('option:selected').length;\n\n              if ((maxOptions && maxReached) || (maxOptionsGrp && maxReachedGrp)) {\n                if (maxOptions && maxOptions == 1) {\n                  $options.prop('selected', false);\n                  $option.prop('selected', true);\n                  that.$menu.find('.selected').removeClass('selected');\n                  that.setSelected(clickedIndex, true);\n                } else if (maxOptionsGrp && maxOptionsGrp == 1) {\n                  $optgroup.find('option:selected').prop('selected', false);\n                  $option.prop('selected', true);\n                  var optgroupID = $this.data('optgroup');\n\n                  that.$menu.find('.selected').has('a[data-optgroup=\"' + optgroupID + '\"]').removeClass('selected');\n\n                  that.setSelected(clickedIndex, true);\n                } else {\n                  var maxOptionsArr = (typeof that.options.maxOptionsText === 'function') ?\n                          that.options.maxOptionsText(maxOptions, maxOptionsGrp) : that.options.maxOptionsText,\n                      maxTxt = maxOptionsArr[0].replace('{n}', maxOptions),\n                      maxTxtGrp = maxOptionsArr[1].replace('{n}', maxOptionsGrp),\n                      $notify = $('<div class=\"notify\"></div>');\n                  // If {var} is set in array, replace it\n                  /** @deprecated */\n                  if (maxOptionsArr[2]) {\n                    maxTxt = maxTxt.replace('{var}', maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);\n                    maxTxtGrp = maxTxtGrp.replace('{var}', maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1]);\n                  }\n\n                  $option.prop('selected', false);\n\n                  that.$menu.append($notify);\n\n                  if (maxOptions && maxReached) {\n                    $notify.append($('<div>' + maxTxt + '</div>'));\n                    that.$element.trigger('maxReached.bs.select');\n                  }\n\n                  if (maxOptionsGrp && maxReachedGrp) {\n                    $notify.append($('<div>' + maxTxtGrp + '</div>'));\n                    that.$element.trigger('maxReachedGrp.bs.select');\n                  }\n\n                  setTimeout(function () {\n                    that.setSelected(clickedIndex, false);\n                  }, 10);\n\n                  $notify.delay(750).fadeOut(300, function () {\n                    $(this).remove();\n                  });\n                }\n              }\n            }\n          }\n\n          if (!that.multiple) {\n            that.$button.focus();\n          } else if (that.options.liveSearch) {\n            that.$searchbox.focus();\n          }\n\n          // Trigger select 'change'\n          if ((prevValue != that.$element.val() && that.multiple) || (prevIndex != that.$element.prop('selectedIndex') && !that.multiple)) {\n            that.$element.change();\n          }\n        }\n      });\n\n      this.$menu.on('click', 'li.disabled a, .popover-title, .popover-title :not(.close)', function (e) {\n        if (e.target == this) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (!that.options.liveSearch) {\n            that.$button.focus();\n          } else {\n            that.$searchbox.focus();\n          }\n        }\n      });\n\n      this.$menu.on('click', 'li.divider, li.dropdown-header', function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        if (!that.options.liveSearch) {\n          that.$button.focus();\n        } else {\n          that.$searchbox.focus();\n        }\n      });\n\n      this.$menu.on('click', '.popover-title .close', function () {\n        that.$button.focus();\n      });\n\n      this.$searchbox.on('click', function (e) {\n        e.stopPropagation();\n      });\n\n\n      this.$menu.on('click', '.actions-btn', function (e) {\n        if (that.options.liveSearch) {\n          that.$searchbox.focus();\n        } else {\n          that.$button.focus();\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        if ($(this).is('.bs-select-all')) {\n          that.selectAll();\n        } else {\n          that.deselectAll();\n        }\n        that.$element.change();\n      });\n\n      this.$element.change(function () {\n        that.render(false);\n      });\n    },\n\n    liveSearchListener: function () {\n      var that = this,\n          no_results = $('<li class=\"no-results\"></li>');\n\n      this.$newElement.on('click.dropdown.data-api touchstart.dropdown.data-api', function () {\n        that.$menu.find('.active').removeClass('active');\n        if (!!that.$searchbox.val()) {\n          that.$searchbox.val('');\n          that.$lis.not('.is-hidden').removeClass('hide');\n          if (!!no_results.parent().length) no_results.remove();\n        }\n        if (!that.multiple) that.$menu.find('.selected').addClass('active');\n        setTimeout(function () {\n          that.$searchbox.focus();\n        }, 10);\n      });\n\n      this.$searchbox.on('click.dropdown.data-api focus.dropdown.data-api touchend.dropdown.data-api', function (e) {\n        e.stopPropagation();\n      });\n\n      this.$searchbox.on('input propertychange', function () {\n        if (that.$searchbox.val()) {\n\n          if (that.options.searchAccentInsensitive) {\n            that.$lis.not('.is-hidden').removeClass('hide').find('a').not(':aicontains(' + normalizeToBase(that.$searchbox.val()) + ')').parent().addClass('hide');\n          } else {\n            that.$lis.not('.is-hidden').removeClass('hide').find('a').not(':icontains(' + that.$searchbox.val() + ')').parent().addClass('hide');\n          }\n\n          if (!that.$menu.find('li').filter(':visible:not(.no-results)').length) {\n            if (!!no_results.parent().length) no_results.remove();\n            no_results.html(that.options.noneResultsText + ' \"' + htmlEscape(that.$searchbox.val()) + '\"').show();\n            that.$menu.find('li').last().after(no_results);\n          } else if (!!no_results.parent().length) {\n            no_results.remove();\n          }\n\n        } else {\n          that.$lis.not('.is-hidden').removeClass('hide');\n          if (!!no_results.parent().length) no_results.remove();\n        }\n\n        that.$menu.find('li.active').removeClass('active');\n        that.$menu.find('li').filter(':visible:not(.divider)').eq(0).addClass('active').find('a').focus();\n        $(this).focus();\n      });\n    },\n\n    val: function (value) {\n      if (typeof value !== 'undefined') {\n        this.$element.val(value);\n        this.render();\n\n        return this.$element;\n      } else {\n        return this.$element.val();\n      }\n    },\n\n    selectAll: function () {\n      this.findLis();\n      this.$lis.not('.divider').not('.disabled').not('.selected').filter(':visible').find('a').click();\n    },\n\n    deselectAll: function () {\n      this.findLis();\n      this.$lis.not('.divider').not('.disabled').filter('.selected').filter(':visible').find('a').click();\n    },\n\n    keydown: function (e) {\n      var $this = $(this),\n          $parent = ($this.is('input')) ? $this.parent().parent() : $this.parent(),\n          $items,\n          that = $parent.data('this'),\n          index,\n          next,\n          first,\n          last,\n          prev,\n          nextPrev,\n          prevIndex,\n          isActive,\n          keyCodeMap = {\n            32: ' ',\n            48: '0',\n            49: '1',\n            50: '2',\n            51: '3',\n            52: '4',\n            53: '5',\n            54: '6',\n            55: '7',\n            56: '8',\n            57: '9',\n            59: ';',\n            65: 'a',\n            66: 'b',\n            67: 'c',\n            68: 'd',\n            69: 'e',\n            70: 'f',\n            71: 'g',\n            72: 'h',\n            73: 'i',\n            74: 'j',\n            75: 'k',\n            76: 'l',\n            77: 'm',\n            78: 'n',\n            79: 'o',\n            80: 'p',\n            81: 'q',\n            82: 'r',\n            83: 's',\n            84: 't',\n            85: 'u',\n            86: 'v',\n            87: 'w',\n            88: 'x',\n            89: 'y',\n            90: 'z',\n            96: '0',\n            97: '1',\n            98: '2',\n            99: '3',\n            100: '4',\n            101: '5',\n            102: '6',\n            103: '7',\n            104: '8',\n            105: '9'\n          };\n\n      if (that.options.liveSearch) $parent = $this.parent().parent();\n\n      if (that.options.container) $parent = that.$menu;\n\n      $items = $('[role=menu] li a', $parent);\n\n      isActive = that.$menu.parent().hasClass('open');\n\n      if (!isActive && /([0-9]|[A-z])/.test(String.fromCharCode(e.keyCode))) {\n        if (!that.options.container) {\n          that.setSize();\n          that.$menu.parent().addClass('open');\n          isActive = true;\n        } else {\n          that.$newElement.trigger('click');\n        }\n        that.$searchbox.focus();\n      }\n\n      if (that.options.liveSearch) {\n        if (/(^9$|27)/.test(e.keyCode.toString(10)) && isActive && that.$menu.find('.active').length === 0) {\n          e.preventDefault();\n          that.$menu.parent().removeClass('open');\n          that.$button.focus();\n        }\n        $items = $('[role=menu] li:not(.divider):not(.dropdown-header):visible', $parent);\n        if (!$this.val() && !/(38|40)/.test(e.keyCode.toString(10))) {\n          if ($items.filter('.active').length === 0) {\n            if (that.options.searchAccentInsensitive) {\n              $items = that.$newElement.find('li').filter(':aicontains(' + normalizeToBase(keyCodeMap[e.keyCode]) + ')');\n            } else {\n              $items = that.$newElement.find('li').filter(':icontains(' + keyCodeMap[e.keyCode] + ')');\n            }\n          }\n        }\n      }\n\n      if (!$items.length) return;\n\n      if (/(38|40)/.test(e.keyCode.toString(10))) {\n        index = $items.index($items.filter(':focus'));\n        first = $items.parent(':not(.disabled):visible').first().index();\n        last = $items.parent(':not(.disabled):visible').last().index();\n        next = $items.eq(index).parent().nextAll(':not(.disabled):visible').eq(0).index();\n        prev = $items.eq(index).parent().prevAll(':not(.disabled):visible').eq(0).index();\n        nextPrev = $items.eq(next).parent().prevAll(':not(.disabled):visible').eq(0).index();\n\n        if (that.options.liveSearch) {\n          $items.each(function (i) {\n            if ($(this).is(':not(.disabled)')) {\n              $(this).data('index', i);\n            }\n          });\n          index = $items.index($items.filter('.active'));\n          first = $items.filter(':not(.disabled):visible').first().data('index');\n          last = $items.filter(':not(.disabled):visible').last().data('index');\n          next = $items.eq(index).nextAll(':not(.disabled):visible').eq(0).data('index');\n          prev = $items.eq(index).prevAll(':not(.disabled):visible').eq(0).data('index');\n          nextPrev = $items.eq(next).prevAll(':not(.disabled):visible').eq(0).data('index');\n        }\n\n        prevIndex = $this.data('prevIndex');\n\n        if (e.keyCode == 38) {\n          if (that.options.liveSearch) index -= 1;\n          if (index != nextPrev && index > prev) index = prev;\n          if (index < first) index = first;\n          if (index == prevIndex) index = last;\n        }\n\n        if (e.keyCode == 40) {\n          if (that.options.liveSearch) index += 1;\n          if (index == -1) index = 0;\n          if (index != nextPrev && index < next) index = next;\n          if (index > last) index = last;\n          if (index == prevIndex) index = first;\n        }\n\n        $this.data('prevIndex', index);\n\n        if (!that.options.liveSearch) {\n          $items.eq(index).focus();\n        } else {\n          e.preventDefault();\n          if (!$this.is('.dropdown-toggle')) {\n            $items.removeClass('active');\n            $items.eq(index).addClass('active').find('a').focus();\n            $this.focus();\n          }\n        }\n\n      } else if (!$this.is('input')) {\n        var keyIndex = [],\n            count,\n            prevKey;\n\n        $items.each(function () {\n          if ($(this).parent().is(':not(.disabled)')) {\n            if ($.trim($(this).text().toLowerCase()).substring(0, 1) == keyCodeMap[e.keyCode]) {\n              keyIndex.push($(this).parent().index());\n            }\n          }\n        });\n\n        count = $(document).data('keycount');\n        count++;\n        $(document).data('keycount', count);\n\n        prevKey = $.trim($(':focus').text().toLowerCase()).substring(0, 1);\n\n        if (prevKey != keyCodeMap[e.keyCode]) {\n          count = 1;\n          $(document).data('keycount', count);\n        } else if (count >= keyIndex.length) {\n          $(document).data('keycount', 0);\n          if (count > keyIndex.length) count = 1;\n        }\n\n        $items.eq(keyIndex[count - 1]).focus();\n      }\n\n      // Select focused option if \"Enter\", \"Spacebar\" or \"Tab\" (when selectOnTab is true) are pressed inside the menu.\n      if ((/(13|32)/.test(e.keyCode.toString(10)) || (/(^9$)/.test(e.keyCode.toString(10)) && that.options.selectOnTab)) && isActive) {\n        if (!/(32)/.test(e.keyCode.toString(10))) e.preventDefault();\n        if (!that.options.liveSearch) {\n          $(':focus').click();\n        } else if (!/(32)/.test(e.keyCode.toString(10))) {\n          that.$menu.find('.active a').click();\n          $this.focus();\n        }\n        $(document).data('keycount', 0);\n      }\n\n      if ((/(^9$|27)/.test(e.keyCode.toString(10)) && isActive && (that.multiple || that.options.liveSearch)) || (/(27)/.test(e.keyCode.toString(10)) && !isActive)) {\n        that.$menu.parent().removeClass('open');\n        that.$button.focus();\n      }\n    },\n\n    mobile: function () {\n      this.$element.addClass('mobile-device').appendTo(this.$newElement);\n      if (this.options.container) this.$menu.hide();\n    },\n\n    refresh: function () {\n      this.$lis = null;\n      this.reloadLi();\n      this.render();\n      this.setWidth();\n      this.setStyle();\n      this.checkDisabled();\n      this.liHeight();\n    },\n\n    update: function () {\n      this.reloadLi();\n      this.setWidth();\n      this.setStyle();\n      this.checkDisabled();\n      this.liHeight();\n    },\n\n    hide: function () {\n      this.$newElement.hide();\n    },\n\n    show: function () {\n      this.$newElement.show();\n    },\n\n    remove: function () {\n      this.$newElement.remove();\n      this.$element.remove();\n    }\n  };\n\n  // SELECTPICKER PLUGIN DEFINITION\n  // ==============================\n  function Plugin(option, event) {\n    // get the args of the outer function..\n    var args = arguments;\n    // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them\n    // to get lost\n    //noinspection JSDuplicatedDeclaration\n    var _option = option,\n        option = args[0],\n        event = args[1];\n    [].shift.apply(args);\n\n    // This fixes a bug in the js implementation on android 2.3 #715\n    if (typeof option == 'undefined') {\n      option = _option;\n    }\n\n    var value;\n    var chain = this.each(function () {\n      var $this = $(this);\n      if ($this.is('select')) {\n        var data = $this.data('selectpicker'),\n            options = typeof option == 'object' && option;\n\n        if (!data) {\n          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, $this.data(), options);\n          $this.data('selectpicker', (data = new Selectpicker(this, config, event)));\n        } else if (options) {\n          for (var i in options) {\n            if (options.hasOwnProperty(i)) {\n              data.options[i] = options[i];\n            }\n          }\n        }\n\n        if (typeof option == 'string') {\n          if (data[option] instanceof Function) {\n            value = data[option].apply(data, args);\n          } else {\n            value = data.options[option];\n          }\n        }\n      }\n    });\n\n    if (typeof value !== 'undefined') {\n      //noinspection JSUnusedAssignment\n      return value;\n    } else {\n      return chain;\n    }\n  }\n\n  var old = $.fn.selectpicker;\n  $.fn.selectpicker = Plugin;\n  $.fn.selectpicker.Constructor = Selectpicker;\n\n  // SELECTPICKER NO CONFLICT\n  // ========================\n  $.fn.selectpicker.noConflict = function () {\n    $.fn.selectpicker = old;\n    return this;\n  };\n\n  $(document)\n      .data('keycount', 0)\n      .on('keydown', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bs-searchbox input', Selectpicker.prototype.keydown)\n      .on('focusin.modal', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bs-searchbox input', function (e) {\n        e.stopPropagation();\n      });\n\n  // SELECTPICKER DATA-API\n  // =====================\n  $(window).on('load.bs.select.data-api', function () {\n    $('.selectpicker').each(function () {\n      var $selectpicker = $(this);\n      Plugin.call($selectpicker, $selectpicker.data());\n    })\n  });\n})(jQuery);\n\n/*!\n * Bootstrap-select v1.6.3 (http://silviomoreto.github.io/bootstrap-select/)\n *\n * Copyright 2013-2014 bootstrap-select\n * Licensed under MIT (https://github.com/silviomoreto/bootstrap-select/blob/master/LICENSE)\n */\n!function(a){a.fn.selectpicker.defaults={noneSelectedText:\"No hay selección\",noneResultsText:\"No hay resultados\",countSelectedText:\"Seleccionados {0} de {1}\",maxOptionsText:[\"Límite alcanzado ({n} {var} max)\",\"Límite del grupo alcanzado({n} {var} max)\",[\"elementos\",\"element\"]],multipleSeparator:\", \"}}(jQuery);\n","/*!\n * Bootstrap-select v1.6.3 (http://silviomoreto.github.io/bootstrap-select/)\n *\n * Copyright 2013-2014 bootstrap-select\n * Licensed under MIT (https://github.com/silviomoreto/bootstrap-select/blob/master/LICENSE)\n */\n(function ($) {\n  $.fn.selectpicker.defaults = {\n    noneSelectedText: 'No hay selección',\n    noneResultsText: 'No hay resultados',\n    countSelectedText: 'Seleccionados {0} de {1}',\n    maxOptionsText: ['Límite alcanzado ({n} {var} max)', 'Límite del grupo alcanzado({n} {var} max)', ['elementos', 'element']],\n    multipleSeparator: ', '\n  };\n}(jQuery));\n"],"sourceRoot":"/source/"}